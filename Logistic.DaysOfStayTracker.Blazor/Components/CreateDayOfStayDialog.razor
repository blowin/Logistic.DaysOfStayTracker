@using Logistic.DaysOfStayTracker.Core.DayOfStays
@using Logistic.DaysOfStayTracker.Core.DayOfStays.Commands
@using MediatR

<MudDialog>
    <DialogContent>
        @foreach (var error in _errorMessage)
        {
            <MudText Color="Color.Error">@error</MudText>
        }
        <MudDatePicker @bind-Date="@_entryDate" PickerVariant="PickerVariant.Dialog" Editable="true" Label="Дата въезда" Required="true"></MudDatePicker>
        <MudDatePicker @bind-Date="@_exitDate" PickerVariant="PickerVariant.Dialog" Editable="true" Label="Дата выезда" Required="true"></MudDatePicker>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Отмена</MudButton>
        <MudButton Color="Color.Primary" OnClick="@(async () => await Submit())">Добавить</MudButton>
    </DialogActions>
</MudDialog>
@code {
    private ICollection<string> _errorMessage = Array.Empty<string>();

    private DateTime? _exitDate = DateTime.Now;
    
    private DateTime? _entryDate = DateTime.Now;
    
    [Parameter]
    public Guid DriverId { get; set; }

    [Parameter]
    public IMediator Mediator { get; set; } = null!;

    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; } = null!;

    async Task Submit()
    {
        _errorMessage = Array.Empty<string>();
        if (_entryDate == null)
        {
            _errorMessage = new []{"Необходимо указать дату въезда"};
            return;
        }

        if (_exitDate == null)
        {
            _errorMessage = new []{ "Необходимо указать дату выезда" };
            return;
        }

        var request = new DayOfStayCreateRequest(DriverId,
            DateOnly.FromDateTime(_entryDate.Value.ToLocalTime()),
            DateOnly.FromDateTime(_exitDate.Value.ToLocalTime())
            );
        
        var createResult = await Mediator.Send(request);
        
        if (createResult.IsFailure)
        {
            _errorMessage = createResult.Error;
            return;
        }
        
        CloseOk(createResult.Value);
    }
    
    void Cancel() => MudDialog.Cancel();

    private void CloseOk(DayOfStay result)
    {
        var dialogResult = DialogResult.Ok(result);
        MudDialog.Close(dialogResult);
    }
    
    public static DialogParameters CreateParameters(Guid driverId, IMediator mediator)
    {
        var parameters = new DialogParameters
        {
            {nameof(DriverId), driverId},
            {nameof(Mediator), mediator},
        };
        return parameters;
    }
}