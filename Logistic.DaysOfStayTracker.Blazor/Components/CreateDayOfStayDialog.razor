@using Logistic.DaysOfStayTracker.Core.Countries
@using Logistic.DaysOfStayTracker.Core.DayOfStays
@using Logistic.DaysOfStayTracker.Core.DayOfStays.Commands
@using MediatR

<MudDialog>
    <DialogContent>
        @foreach (var error in _errorMessage)
        {
            <MudText Color="Color.Error">@error</MudText>
        }
        
        <MudSelect @bind-Value="@_entryCountry" T="Country" Label="Страна въезда" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" Required="true">
            @foreach (var country in Countries)
            {
                <MudSelectItem Value="@country">@country.Name</MudSelectItem>
            }
        </MudSelect>
        <MudDatePicker @bind-Date="@_entryDate" Editable="true" Label="Дата въезда" Required="true"></MudDatePicker>

        <MudSelect Class="pt-5" @bind-Value="@_exitCountry" T="Country" Label="Страна выезда" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" Required="true">
            @foreach (var country in Countries)
            {
                <MudSelectItem Value="@country">@country.Name</MudSelectItem>
            }
        </MudSelect>
        <MudDatePicker @bind-Date="@_exitDate" Editable="true" Label="Дата выезда" Required="true"></MudDatePicker>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Отмена</MudButton>
        <MudButton Color="Color.Primary" OnClick="@(async () => await Submit())">Добавить</MudButton>
    </DialogActions>
</MudDialog>
@code {
    private ICollection<string> _errorMessage = Array.Empty<string>();

    private Country _entryCountry = null!;
    private DateTime? _exitDate = DateTime.Now;
    
    private Country _exitCountry = null!;
    private DateTime? _entryDate = DateTime.Now;

    [Parameter]
    public IReadOnlyList<Country> Countries { get; set; } = Array.Empty<Country>();
    
    [Parameter]
    public Guid DriverId { get; set; }

    [Parameter]
    public IMediator Mediator { get; set; } = null!;

    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; } = null!;

    protected override void OnInitialized()
    {
        _entryCountry = Countries.First();
        _exitCountry = Countries.First();
    }

    async Task Submit()
    {
        _errorMessage = Array.Empty<string>();
        if (_entryDate == null)
        {
            _errorMessage = new []{"Необходимо указать дату въезда"};
            return;
        }

        if (_exitDate == null)
        {
            _errorMessage = new []{ "Необходимо указать дату выезда" };
            return;
        }

        var request = new DayOfStayCreateRequest(DriverId,
            _entryCountry.Id, DateOnly.FromDateTime(_entryDate.Value.ToLocalTime()),
            _exitCountry.Id, DateOnly.FromDateTime(_exitDate.Value.ToLocalTime())
            );
        
        var createResult = await Mediator.Send(request);
        
        if (createResult.IsFailure)
        {
            _errorMessage = createResult.Error;
            return;
        }
        
        CloseOk(createResult.Value);
    }
    
    void Cancel() => MudDialog.Cancel();

    private void CloseOk(DayOfStay result)
    {
        var dialogResult = DialogResult.Ok(result);
        MudDialog.Close(dialogResult);
    }
    
    public static DialogParameters CreateParameters(IReadOnlyList<Country> countries, Guid driverId, IMediator mediator)
    {
        var parameters = new DialogParameters
        {
            {nameof(Countries), countries},
            {nameof(DriverId), driverId},
            {nameof(Mediator), mediator},
        };
        return parameters;
    }
}